# Cleaning firewall rules
Get-NetFirewallProfile | foreach {
	$Name=$_.Name
	$DefaultInboundAction=$_.DefaultInboundAction
	if( $_.Enabled -eq $false ){
		Write-Host -BackgroundColor Red -ForegroundColor White "    [!] ${Name} firewall profile was disabled"
	}
	if( $_.DefaultInboundAction -ne "Block" ){
		Write-Host -BackgroundColor Red -ForegroundColor White "    [!] ${Name} firewall profile was DefaultInboundAction=${DefaultInboundAction}"
	}
	$_
} | Set-NetFirewallProfile -Enabled True -DefaultInboundAction Block


# Ref: https://en.wikipedia.org/wiki/Reserved_IP_addresses
$IPForInternet=@('1.0.0.0-9.255.255.255',
'11.0.0.0-100.63.255.255',
'100.128.0.0-126.255.255.255',
'128.0.0.0-169.253.255.255',
'169.255.0.0-172.15.255.255',
'172.32.0.0-191.255.255.255',
'192.0.1.0-192.0.1.255',
'192.0.3.0-192.167.255.255',
'192.169.0.0-198.17.255.255',
'198.20.0.0-198.51.99.255',
'198.51.101.0-203.0.112.255',
'203.0.114.0-255.255.255.254')
$IPForIntranet=@(
'0.0.0.0–0.255.255.255',
'10.0.0.0–10.255.255.255',
'100.64.0.0–100.127.255.255',
'127.0.0.0–127.255.255.255',
'169.254.0.0–169.254.255.255',
'172.16.0.0–172.31.255.255',
'192.0.0.0–192.0.0.255',
'192.168.0.0–192.168.255.255',
'198.18.0.0–198.19.255.255')
# From: https://docs.microsoft.com/en-us/microsoft-365/enterprise/urls-and-ip-address-ranges?view=o365-worldwide
$IPForOffice365 = (@"
104.146.128.0/17, 104.42.230.91/32, 104.47.0.0/17, 13.107.128.0/22,
13.107.136.0/22, 13.107.140.6/32, 13.107.18.10/31, 13.107.6.152/31,
13.107.6.156/31, 13.107.6.171/32, 13.107.64.0/18, 13.107.7.190/31,
13.107.9.156/31, 13.80.125.22/32, 13.91.91.243/32, 131.253.33.215/32,
132.245.0.0/16, 150.171.32.0/22, 150.171.40.0/22, 157.55.145.0/25,
157.55.155.0/25, 157.55.227.192/26, 20.190.128.0/18, 204.79.197.215/32,
23.103.160.0/20, 40.104.0.0/15, 40.107.0.0/16, 40.108.128.0/17,
40.126.0.0/18, 40.81.156.154/32, 40.90.218.198/32, 40.92.0.0/15,
40.96.0.0/13, 52.100.0.0/14, 52.104.0.0/14, 52.108.0.0/14,
52.112.0.0/14, 52.120.0.0/14, 52.120.0.0/14, 52.174.56.180/32,
52.183.75.62/32, 52.184.165.82/32, 52.238.106.116/32, 52.238.119.141/32,
52.238.78.88/32, 52.244.160.207/32, 52.244.203.72/32,
52.244.207.172/32, 52.244.223.198/32, 52.244.37.168/32,
52.247.150.191/32, 52.247.150.191/32, 52.96.0.0/14
"@).replace("`n","").replace("`r","").replace(" ","").split(",")

$utf8 = new-object -TypeName System.Text.UTF8Encoding
$global:orderWF = 0

function getHash( $str )
{
	$stream = New-Object System.IO.MemoryStream -ArgumentList @(,$utf8.GetBytes($str))
	return Get-FileHash -Algorithm MD5 -InputStream $stream | Select-Object -ExpandProperty Hash	
}

function blockExe( $name, $exe, $group, [Parameter(Mandatory=$false)] $allowNonRoutableIP=$false )
{
	fwRule @{
		Name='Word'
		Group='Office'
		Enabled='True'
		Direction='Outbound'
		Action='Block'
		blockExe=@(
			"C:\Program Files*\Microsoft Office*\root\*\winword.exe",
			"C:\Program Files*\Microsoft Office*\*\root\*\winword.exe",
			"C:\Program Files*\Microsoft Office*\*\winword.exe",
			"C:\Program Files*\Microsoft Office*\*\excelcnv.exe",
			"C:\Program Files*\Microsoft Office*\*\*\excelcnv.exe"
		)
		AllowIntranet=$true
		AllowO365=$true
	}
	get-item -ErrorAction Continue $exe | foreach {
		$bin=$_.Fullname
		$id = "{0:d3}" -f $orderWF
		$global:orderWF += 1
		$route="blockExe-$name-$bin-$group-$allowNonRoutableIP-N$id"
		$hash = getHash $route
		$rule = Get-NetFirewallRule -Name "*AutoHarden*$hash*"
		if( $rule.Count -eq 0 ){
			Write-Host "[*] ADD firewall rule >$route< $hash"
			if( $allowNonRoutableIP ){	
				New-NetFirewallRule -direction Outbound -Action Block -Program $bin -RemoteAddress $IPForInternet -Group "AutoHarden-$group" -Name "[AutoHarden-$AutoHarden_version-$id-$hash][Except Intranet] $name : $bin" -DisplayName "[AutoHarden-$AutoHarden_version-$id][Except Intranet] $name : $bin" -ErrorAction Continue | Out-Null
			}else{
				New-NetFirewallRule -direction Outbound -Action Block -Program $bin -Group "AutoHarden-$group" -Name "[AutoHarden-$AutoHarden_version-$id-$hash] $name : $bin" -DisplayName "[AutoHarden-$AutoHarden_version-$id] $name : $bin" -ErrorAction Continue | Out-Null
			}
		}else{
			Write-Host "[*] UPDATE firewall rule >$route< $hash"
			$rule | Set-NetFirewallRule -Enabled True -direction Outbound -Action Block -Program $bin -NewDisplayName "[AutoHarden-$AutoHarden_version-$id][Except Intranet] $name : $bin" -ErrorAction Continue
			$rule | Rename-NetFirewallRule -NewName "[AutoHarden-$AutoHarden_version-$id-$hash][Except Intranet] $name : $bin"
		}
	}
}

function blockExeExceptOffice365( $name, $exe, $group, [Parameter(Mandatory=$false)] $allowNonRoutableIP=$false )
{
	get-item -ErrorAction Continue $exe | foreach {
		$bin=$_.Fullname
		$id = "{0:d3}" -f $orderWF
		$global:orderWF += 1
		$route="blockExeExceptOffice365-$name-$bin-$group-$allowNonRoutableIP-N$id"
		$hash = getHash $route
		$rule = Get-NetFirewallRule -Name "*AutoHarden*$hash*"
		if( $rule.Count -eq 0 ){
			Write-Host "[*] ADD firewall rule >$route< $hash"
			New-NetFirewallRule -direction Outbound -Action Allow -Program $bin -RemoteAddress $IPForOffice365 -Group "AutoHarden-$group" -Name "[AutoHarden-$AutoHarden_version-$id-$hash][Except Office365] $name : $bin" -DisplayName "[AutoHarden-$AutoHarden_version-$id][Except Office365] $name : $bin" -ErrorAction Continue | Out-Null
		}else{
			Write-Host "[*] UPDATE firewall rule >$route< $hash"
			$rule | Set-NetFirewallRule -Enabled True -direction Outbound -Action Allow -Program $bin -RemoteAddress $IPForOffice365 -NewDisplayName "[AutoHarden-$AutoHarden_version-$id][Except Office365] $name : $bin" -ErrorAction Continue
			$rule | Rename-NetFirewallRule -NewName "[AutoHarden-$AutoHarden_version-$id-$hash][Except Office365] $name : $bin"
		}
		blockExe $name $bin $group $allowNonRoutableIP
	}
}

function allowExeBypass( $name, $exe, $group )
{
	get-item -ErrorAction Continue $exe | foreach {
		$bin=$_.Fullname
		
		$id = "{0:d3}" -f $orderWF
		$global:orderWF += 1
		$route="allowExeBypass-OUT-$name-$bin-$group-N$id"
		$hash = getHash $route
		$rule = Get-NetFirewallRule -Name "*AutoHarden*$hash*"
		if( $rule.Count -eq 0 ){
			Write-Host "[*] ADD firewall rule >$route< $hash"
			New-NetFirewallRule -direction Outbound -Action Allow -Program $bin -Group "AutoHarden-$group" -Name "[AutoHarden-$AutoHarden_version-$id-$hash][OUT] $name bypass" -DisplayName "[AutoHarden-$AutoHarden_version-$id][OUT] $name bypass" -ErrorAction Continue | Out-Null
		}else{
			Write-Host "[*] UPDATE firewall rule >$route< $hash"
			$rule | Set-NetFirewallRule -Enabled True -direction Outbound -Action Allow -Program $bin -NewDisplayName "[AutoHarden-$AutoHarden_version-$id][OUT] $name bypass" -ErrorAction Continue
			$rule | Rename-NetFirewallRule -NewName "[AutoHarden-$AutoHarden_version-$id-$hash][OUT] $name bypass"
		}
		
		$route="allowExeBypass-IN-$name-$bin-$group-N$id"
		$hash = getHash $route
		$rule = Get-NetFirewallRule -Name "*AutoHarden*$hash*"
		if( $rule.Count -eq 0 ){
			Write-Host "[*] ADD firewall rule >$route< $hash"
			New-NetFirewallRule -direction Inbound -Action Allow -Program $bin -Group "AutoHarden-$group" -Name "[AutoHarden-$AutoHarden_version-$id-$hash][IN] $name bypass" -DisplayName "[AutoHarden-$AutoHarden_version-$id][IN] $name bypass" -ErrorAction Continue | Out-Null
		}else{
			Write-Host "[*] UPDATE firewall rule >$route< $hash"
			$rule | Set-NetFirewallRule -Enabled True -direction Inbound -Action Allow -Program $bin -NewDisplayName "[AutoHarden-$AutoHarden_version-$id][IN] $name bypass" -ErrorAction Continue
			$rule | Rename-NetFirewallRule -NewName "[AutoHarden-$AutoHarden_version-$id-$hash][OUT] $name bypass"
		}
	}
}

function denyOutgoingPort( $name, $group, $port, [Parameter(Mandatory=$false)] $allowNonRoutableIP=$false, [Parameter(Mandatory=$false)] $proto='tcp' )
{
	$id = "{0:d3}" -f $orderWF
	$global:orderWF += 1
	$route="denyOutgoingPort-$name-$port-$group-$allowNonRoutableIP-$proto-N$id"
	$hash = getHash $route
	$rule = Get-NetFirewallRule -Name "*AutoHarden*$hash*"
	
	if( $allowNonRoutableIP ){
		if( $rule.Count -eq 0 ){
			Write-Host "[*] ADD firewall rule >$route< $hash"
			New-NetFirewallRule -direction Outbound -Action Block -Protocol $proto -RemotePort $port -RemoteAddress $IPForInternet -Group "AutoHarden-$group" -Name "[AutoHarden-$AutoHarden_version-$id-$hash][Except Intranet] $name" -DisplayName "[AutoHarden-$AutoHarden_version-$id][Except Intranet] $name" -ErrorAction Continue | Out-Null
		}else{
			Write-Host "[*] UPDATE firewall rule >$route< $hash"
			$rule | Set-NetFirewallRule -Enabled True -direction Outbound -Action Block -Protocol $proto -RemotePort $port -RemoteAddress $IPForInternet -NewDisplayName "[AutoHarden-$AutoHarden_version-$id][Except Intranet] $name" -ErrorAction Continue
			$rule | Rename-NetFirewallRule -NewName "[AutoHarden-$AutoHarden_version-$id-$hash][Except Intranet] $name"
		}
	}else{
		if( $rule.Count -eq 0 ){
			Write-Host "[*] ADD firewall rule >$route< $hash"
			New-NetFirewallRule -direction Outbound -Action Block -Protocol $proto -RemotePort $port -Group "AutoHarden-$group" -Name "[AutoHarden-$AutoHarden_version-$id-$hash] $name" -DisplayName "[AutoHarden-$AutoHarden_version-$id] $name" -ErrorAction Continue | Out-Null
		}else{
			Write-Host "[*] UPDATE firewall rule >$route< $hash"
			$rule | Set-NetFirewallRule -Enabled True -direction Outbound -Action Block -Protocol $proto -RemotePort $port -NewDisplayName "[AutoHarden-$AutoHarden_version-$id] $name" -ErrorAction Continue
			$rule | Rename-NetFirewallRule -NewName "[AutoHarden-$AutoHarden_version-$id-$hash] $name"
		}
	}
}


function allowOutgoingPortTo( $name, $group, $port, $destination, [Parameter(Mandatory=$false)] $proto='tcp' )
{
	$id = "{0:d3}" -f $orderWF
	$global:orderWF += 1
	$route="allowOutgoingPortTo-$name-$port-$group-$destination-$proto-N$id"
	$hash = getHash $route
	$rule = Get-NetFirewallRule -Name "*AutoHarden*$hash*"

	if( $rule.Count -eq 0 ){
		Write-Host "[*] allowOutgoingPortTo - ADD firewall rule >$route< $hash"
		New-NetFirewallRule -direction Outbound -Action Block -Protocol $proto -RemotePort $port -RemoteAddress $destination -Group "AutoHarden-$group" -Name "[AutoHarden-$AutoHarden_version-$id-$hash] $name" -DisplayName "[AutoHarden-$AutoHarden_version-$id] $name" -ErrorAction Continue | Out-Null
	}else{
		Write-Host "[*] allowOutgoingPortTo - UPDATE firewall rule >$route< $hash"
		$rule | Set-NetFirewallRule -Enabled True -direction Outbound -Action Block -Protocol $proto -RemotePort $port -RemoteAddress $destination -NewDisplayName "[AutoHarden-$AutoHarden_version-$id] $name" -ErrorAction Continue
		$rule | Rename-NetFirewallRule -NewName "[AutoHarden-$AutoHarden_version-$id-$hash] $name"
	}
}

function allowOutgoing( $name, $group, $opt )
{
	fwRule @{
		Name='Word'
		Group='Office'
		Enabled='True'
		Direction='Outbound'
		Action='Block'
		blockExe=@(
			"C:\Program Files*\Microsoft Office*\root\*\winword.exe",
			"C:\Program Files*\Microsoft Office*\*\root\*\winword.exe",
			"C:\Program Files*\Microsoft Office*\*\winword.exe",
			"C:\Program Files*\Microsoft Office*\*\excelcnv.exe",
			"C:\Program Files*\Microsoft Office*\*\*\excelcnv.exe"
		)
		AllowIntranet=$true
		AllowO365=$true
	}
		

	$id = "{0:d3}" -f $orderWF
	$global:orderWF += 1
	$route="allowOutgoingPortTo-$name-$port-$group-$destination-$proto-N$id"
	$hash = getHash $route
	$rule = Get-NetFirewallRule -Name "*AutoHarden*$hash*"

	if( $rule.Count -eq 0 ){
		Write-Host "[*] allowOutgoingPortTo - ADD firewall rule >$route< $hash"
		New-NetFirewallRule -direction Outbound -Action Block -Protocol $proto -RemotePort $port -RemoteAddress $destination -Group "AutoHarden-$group" -Name "[AutoHarden-$AutoHarden_version-$id-$hash] $name" -DisplayName "[AutoHarden-$AutoHarden_version-$id] $name" -ErrorAction Continue | Out-Null
	}else{
		Write-Host "[*] allowOutgoingPortTo - UPDATE firewall rule >$route< $hash"
		$rule | Set-NetFirewallRule -Enabled True -direction Outbound -Action Block -Protocol $proto -RemotePort $port -RemoteAddress $destination -NewDisplayName "[AutoHarden-$AutoHarden_version-$id] $name" -ErrorAction Continue
		$rule | Rename-NetFirewallRule -NewName "[AutoHarden-$AutoHarden_version-$id-$hash] $name"
	}
}

$G_fwRule = New-Object System.Collections.ArrayList
function fwRule( $opt )
{
	$opt['Enabled'] = 'True';
	$G_fwRule.Add($opt);	
}


function _applyFwRules_filtering( $param, $name )
{
	$id = "{0:d3}" -f $orderWF
	$global:orderWF += 1
	$route=($param | ConvertTo-Json -Compress)
	$action=$param['Action']
	$param['Name'] = "[AutoHarden-$AutoHarden_version-$id] $name";
	$param['DisplayName'] = $param['Name'];
	Write-Host "[*] ADD $action firewall rule >$route<"
	New-NetFirewallRule @param -ErrorAction Continue | Out-Null
}


function applyFwRules()
{
	$G_fwRule | where { $_.Action -eq 'Allow' -Or ( $_.Action -eq 'Block' -And $_.AllowO365 -eq $true -And $_.AllowIntranet -eq $true ) } | foreach {
		$param = $_.Clone()			
		$param['Group'] = ('AutoHarden-'+$param['Group']);
		$param['Action'] = 'Allow';
		$name = $param['Name'];
		$param.remove('Name');
		$exe = $param['blockExe'];
		$param.remove('blockExe');
		if( $param.ContainsKey('AllowO365') ){
			if( $param['AllowO365'] ){
				$tag = '[Except O365]';
				$param['RemoteAddress'] = $IPForOffice365;
			}
			$param.remove('AllowO365');
			if( [string]::IsNullOrEmpty($exe) ){
				_applyFwRules_filtering $param "$tag ByPass $name"
			}else{
				$param.remove('AllowIntranet');# Ce cas est traité dans BLOCK
			}
		}
		if( $param.ContainsKey('AllowIntranet') ){
			if( $param['AllowIntranet'] ){
				$tag = '[Except Intranet]';
				$param['RemoteAddress'] = $IPForIntranet;
			}
			$param.remove('AllowIntranet');
			if( [string]::IsNullOrEmpty($exe) ){
				_applyFwRules_filtering $param "$tag ByPass $name"
			}
		}
		if( -not [string]::IsNullOrEmpty($exe) ){	
			$exe | get-item -ErrorAction Continue | foreach {
				$bin = $_.Fullname
				$param['Program'] = $bin;
				_applyFwRules_filtering $param "$tag ByPass $name : $bin"
			}
		}else{
			_applyFwRules_filtering $param " $name"
		}
	}
	
	
	$G_fwRule | where { $_.Action -eq 'Block' } | foreach {
		if( $_.ContainsKey('blockExe') ){
			$param = $_.Clone()			
			$param['Group'] = ('AutoHarden-'+$param['Group']);
			$name = $param['Name'];
			$param.remove('Name');
			$exe = $param['blockExe'];
			$param.remove('blockExe');
			if( $param.ContainsKey('AllowIntranet') ){
				if( $param['AllowIntranet'] ){
					$tag = '[Except Intranet]';
					$param['RemoteAddress'] = $IPForInternet;
				}
				$param.remove('AllowIntranet');			
				$param.remove('AllowO365');			
			}elseif( $param.ContainsKey('AllowO365') ){
				if( $param['AllowO365'] ){
					$tag = '[Except O365]';
					$param['RemoteAddress'] = $IPForOffice365;
				}
				$param.remove('AllowO365');
			}
			$exe | get-item -ErrorAction Continue | foreach {
				$bin = $_.Fullname
				$param['Program'] = $bin;
				_applyFwRules_filtering $param "$tag $name : $bin"
			}
		}else{
			_applyFwRules_filtering $param " $name"
		}
	}
}


fwRule @{
	Name='Nmap'
	Group='Pentest'
	Enabled='True'
	Direction='Outbound'
	Action='Allow'
	Protocol='tcp'
	RemotePort=445
	RemoteAddress=445
	blockExe='*.exe'
	AllowIntranet=$true
	AllowO365=$true
}
fwRule @{
	Name='Powershell'
	Group='LOLBAS'
	Enabled='True'
	Direction='Outbound'
	Action='Block'
	blockExe='*.exe'
	AllowIntranet=$true
}
fwRule @{
	Name='Word'
	Group='Office'
	Enabled='True'
	Direction='Outbound'
	Action='Block'
	blockExe=@(
		"C:\Program Files*\Microsoft Office*\root\*\winword.exe",
		"C:\Program Files*\Microsoft Office*\*\root\*\winword.exe",
		"C:\Program Files*\Microsoft Office*\*\winword.exe",
		"C:\Program Files*\Microsoft Office*\*\excelcnv.exe",
		"C:\Program Files*\Microsoft Office*\*\*\excelcnv.exe"
	)
	AllowIntranet=$true
	AllowO365=$true
}


# Snort & Suricata signatures for:
# https://blog.fox-it.com/2018/01/11/mitm6-compromising-ipv4-networks-via-ipv6

alert udp fe80::/12 [546,547] -> fe80::/12 [546,547] (msg:"FOX-SRT - Policy - DHCPv6 advertise"; content:"|02|"; offset:48; depth:1; reference:url,blog.fox-it.com/2018/01/11/mitm6-compromising-ipv4-networks-via-ipv6/; threshold:type limit, track by_src, count 1, seconds 3600; classtype:policy-violation; sid:21002327; rev:2;)
alert udp ::/0 53 -> any any (msg:"FOX-SRT - Suspicious - WPAD DNS reponse over IPv6"; byte_test:1,&,0x7F,2; byte_test:2,>,0,6; content:"|00 04|wpad"; nocase; fast_pattern; threshold: type limit, track by_src, count 1, seconds 1800; reference:url,blog.fox-it.com/2018/01/11/mitm6-compromising-ipv4-networks-via-ipv6/; classtype:attempted-admin; priority:1; sid:21002330; rev:1;)


function denyOutgoingProto( $name, $group, $proto )
{
	$id = "{0:d3}" -f $orderWF
	$global:orderWF += 1
	$route="denyOutgoingProto-$name-$proto-$group-N$id"
	$hash = getHash $route
	$rule = Get-NetFirewallRule -Name "*AutoHarden*$hash*"
	
	if( $rule.Count -eq 0 ){
		Write-Host "[*] ADD firewall rule >$route< $hash"
		New-NetFirewallRule -direction Outbound -Action Block -Protocol $proto -Group "AutoHarden-$group" -Name "[AutoHarden-$AutoHarden_version-$id-$hash] $name" -DisplayName "[AutoHarden-$AutoHarden_version-$id] $name" -ErrorAction Continue | Out-Null
	}else{
		Write-Host "[*] UPDATE firewall rule >$route< $hash"
		$rule | Set-NetFirewallRule -Enabled True -direction Outbound -Action Block -Protocol $proto -NewDisplayName "[AutoHarden-$AutoHarden_version-$id] $name" -ErrorAction Continue
		$rule | Rename-NetFirewallRule -NewName "[AutoHarden-$AutoHarden_version-$id-$hash] $name"
	}
}

allowExeBypass 'NMAP' "C:\Program Files*\Nmap\nmap.exe" 'NMap'
allowExeBypass 'VMWare' "C:\Program Files*\VMware\*\vmnat.exe" 'VMWare'
denyOutgoingPort 'SMB' 'SMB' 445 $true

# Note about 135/TCP => https://superuser.com/questions/669199/how-to-stop-listening-at-port-135/1012382#1012382
# Port 135/TCP can be killed in 100% of server and workstation if CreateObject("Excel.Application", RemoteMachine) is not used